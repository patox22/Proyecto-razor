@* Quitar esta sección si se utilizan agrupaciones *@
@section Scripts {
    <script   src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
    
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Registrarse";

    // Inicializar variables de página generales
    var nombres = "";
    var apellidos = "";
    var direccion = "";
    var telefono = "";
    var email = "";
    var password = "";
    var confirmPassword = "";

    // Validación de la instalación
    Validation.RequireField("nombres","Debe especificar sus nombres.");
    Validation.RequireField("apellidos", "Debe especificar sus apellidos.");
    Validation.RequireField("direccion","Debe especificar la dirección para la verificación.");
    Validation.RequireField("telefono","Debe especificar su teléfono para contactarnos.");
    Validation.Add("telefono",
    Validator.StringLength(
    maxLength:8,
    minLength:0,
    errorMessage:"El número telefónico es de 8 carácteres."
    
    
    ));
    
   
    Validation.RequireField("email", "Debe especificar una dirección de correo electrónico.");
    Validation.RequireField("password", "La contraseña no puede estar en blanco.");
    Validation.Add("confirmPassword",
        Validator.EqualsTo("password", "La nueva contraseña y la contraseña de confirmación no coinciden."));
    Validation.Add("password",
        Validator.StringLength(
            maxLength: 8,
            minLength: 0,
            errorMessage: "La contraseña debe tener al menos 8 caracteres"));

    // Si esta es una solicitud  POST , valide y procese los datos
    if (IsPost) {
        AntiForgery.Validate();
        nombres=Request.Form["nombres"];
        apellidos=Request.Form["apellidos"];
        direccion=Request.Form["direccion"];
        telefono = Request.Form["telefono"];
        email = Request.Form["email"];
        password = Request.Form["password"];
        confirmPassword = Request.Form["confirmPassword"];

        // Validar la respuesta captcha del usuario
        // if (!ReCaptcha.Validate("PRIVATE_KEY")) {
        //     ModelState.AddError("recaptcha", "La respuesta captcha no es correcta");
        // }

        // Si toda la información es válida, crear una nueva cuenta
        if (Validation.IsValid()) {
            // Insertar un nuevo usuario en la base de datos
            var db = Database.Open("StarterSite");
            var db1 = Database.Open("Members");
            
            // Comprobar si el usuario ya existe
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);
            if (user == null) {
           // Insertar correo electrónico en la tabla de perfiles
           db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);
                
         //Insertar Otros Datos de los Miembros.
        db1.Execute("INSERT INTO Usuario (nombres,apellidos,direccion,telefono) VALUES(@0,@1,@2,@3)",nombres,apellidos,direccion,telefono);
                

                // Cree y asocie una nueva entrada en la base de datos de miembros.
                // Si la operación se realiza correctamente, siga procesando la solicitud
                try {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    var token = WebSecurity.CreateAccount(email, password, requireEmailConfirmation);
                    if (requireEmailConfirmation) {
                        var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
                        var confirmationUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/Confirm?confirmationCode=" + HttpUtility.UrlEncode(token));

                        WebMail.Send(
                            to: email,
                            subject: "Confirme la cuenta",
                            body: "Su código de confirmación es: " + token + ". Visit <a href=\"" + confirmationUrl + "\">" + confirmationUrl + "</a> para activar la cuenta."
                        );
                    }

                    if (requireEmailConfirmation) {
                        // Agradecer al usuario que se haya registrado e informarle de que recibirá un correo
                        Response.Redirect("~/Account/Thanks");
                    } else {
                        // Retroceder a la página principal y salir
                        WebSecurity.Login(email, password);

                        Response.Redirect("~/");
                    }
                } catch (System.Web.Security.MembershipCreateUserException e) {
                    ModelState.AddFormError(e.Message);
                }
            } else {
                // El usuario ya existe
                ModelState.AddFormError("El Usuario ya está registrado en la comunidad...");
            }
        }
    }
}

<hgroup class="title">
    <h1>@Page.Title.</h1>
    <h2>Crear una cuenta nueva Castilla Norte.</h2>
</hgroup>

<form method="post">
    @AntiForgery.GetHtml()
    @* Si existe al menos un error de validación, informar al usuario *@
    @Html.ValidationSummary("No se creó la cuenta. Corrija los errores e inténtelo de nuevo.", excludeFieldErrors: true, htmlAttributes: null)

    <fieldset>
        <legend>Formulario de registro Castilla Norte</legend>
        <ol>

            <li class="nombres">
                <label for="nombres" @if (!ModelState.IsValidField("nombres")) { <text> class="error-label" </text> }>Nombres</label>
                <input type="text" id="nombres" name="nombres" value="@nombres" @Validation.For("nombres") />
                @Html.ValidationMessage("nombres")
            </li>


            <li class="apellidos">
                <label for="apellidos" @if (!ModelState.IsValidField("apellidos")) { <text> class="error-label" </text>      }>Apellidos</label>
                <input type="text" id="apellidos" name="apellidos" value="@apellidos" @Validation.For("apellidos") />
                @Html.ValidationMessage("apellidos")
            </li>



            <li class="direccion">
                <label for="direccion" @if (!ModelState.IsValidField("direccion")) { <text> class="error-label" </text>       }>Dirección</label>
                <input type="text" id="direccion" name="direccion" value="@direccion" @Validation.For("direccion") />
                @Html.ValidationMessage("direccion")
            </li>

            <li class="telefono">
                <label for="telefono" @if (!ModelState.IsValidField("telefono")) { <text> class="error-label" </text>        }>Teléfono</label>
                <input type="text" id="direccion" name="telefono" value="@telefono" @Validation.For("telefono") />
                @Html.ValidationMessage("telefono")
            </li>
            <li class="email">
                <label for="email" @if (!ModelState.IsValidField("email")) { <text> class="error-label" </text>   }>Dirección de correo electrónico</label>
                <input type="text" id="email" name="email" value="@email" @Validation.For("email") />
                @* Escribir los errores de validación del correo electrónico en la página *@
                @Html.ValidationMessage("email")
            </li>
            <li class="password">
                <label for="password" @if (!ModelState.IsValidField("password")) { <text> class="error-label" </text>   }>Contraseña</label>
                <input type="password" id="password" name="password" @Validation.For("password") />
                @* Escribir los errores de validación de contraseña en la página *@
                @Html.ValidationMessage("password")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) { <text> class="error-label" </text>   }>Confirmar contraseña</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword") />
                @* Escribir los errores de validación de contraseña en la página *@
                @Html.ValidationMessage("confirmPassword")
            </li>

            @*
            <li class="recaptcha">
                <div class="message-info">
                    <p>
                        Para habilitar la comprobación CAPTCHA , <a href="http://go.microsoft.com/fwlink/?LinkId=204140">
                            instale
                            ASP.NET Web Helpers Library
                        </a> , elimine las marcas de comentario de ReCaptcha.GetHtml y reemplace 'PUBLIC_KEY'
                        por su clave pública. En la parte superior de esta página, elimine las marcas de comentario de ReCaptcha. Validate y
                        reemplace 'PRIVATE_KEY' por su clave privada.
                        Regístrese para obtener las claves reCAPTCHA en <a href="http://recaptcha.net">reCAPTCHA.net</a>.
                    </p>
                </div>
                @*
                @ReCaptcha.GetHtml("PUBLIC_KEY", theme: "white")
                @Html.ValidationMessage("recaptcha")
            
            </li>*@

        
        </ol>
        <input type="submit" value="Registrarse" />
    </fieldset>
</form>